/*
 Kvalobs - Free Quality Control Software for Meteorological Observations 

 $Id: kvDataFormatter.h,v 1.1.2.3 2007/09/27 09:02:27 paule Exp $                                                       

 Copyright (C) 2007 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: kvalobs-dev@met.no

 This file is part of KVALOBS

 KVALOBS is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as 
 published by the Free Software Foundation; either version 2 
 of the License, or (at your option) any later version.

 KVALOBS is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License along 
 with KVALOBS; if not, write to the Free Software Foundation Inc., 
 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#ifndef __decodeutility_kvdataformatter_h__
#define __decodeutility_kvdataformatter_h__

#include <list>
#include <sstream>
#include <exception>
#include <kvalobs/kvData.h>

namespace decodeutility {

/**
 * @brief This namespace conatins methods for creating and
 * parsing string representations of a series of observations.
 */
namespace kvdataformatter {

typedef std::list<kvalobs::kvData> kvDataList;

/**
 * Separates each string representation of a single
 * observation.
 */
const char mainSeparator = '\n';

/**
 * Separates each field in an observation.
 */
const char internSeparator = '|';

/**
 * @brief create a string representation of a given piece of
 * \code kvData\endcode .
 *
 * @param d The kvData object from which to generate a string
 * representation.
 *
 * @return A string representation of the given kvData object.
 */
const std::string createString(const kvalobs::kvData &d);

/**
 * @brief Create a string representation of a given \code
 * list\endcode of \code kvData\endcode .
 *
 * The returned string is a list of observations, the observations
 * being separated by a single \code mainSeparator\endcode
 * char. Each observation's data field separated by the char \code
 * internseparator\endcode.
 *
 * @param dl The \code list\endcode of \code kvData\endcode to be processed.
 *
 * @return The formatted string.
 */
const std::string createString(kvDataList dl);

template<class Iterator>
const std::string createString(Iterator first, Iterator last) {
  std::stringstream s;
  while (first != last) {
    s << createString(*first) << mainSeparator;
    first++;
  }
  return s.str();
}

/**
 * @brief Create a list of kvData objects, based on the input
 * string. The string is supposed to have been generated by
 * the \code createString\endcode method.
 *
 * @param s The formatted string containing the given
 * observations.
 *
 * @throw InvalidInput If %s cannot be parsed to a legal
 * %kvDataList
 *
 * @return a list of the kvData objects.
 */
kvDataList getKvData(const std::string & s);
}
;
}
;

#endif //__decodeutility_kvdataformatter_h__
