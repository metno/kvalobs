PROGRAM_NAME= decodeutility
TARGET= lib$(PROGRAM_NAME).a
TEST_PROGRAM_NAME= test$(PROGRAM_NAME)

TOP= ../../..

MAIN:=
SRC:=
TESTSRC:=
QSRC:=
UI:=

include $(TOP)/conf/make.$(OSTYPE)

INCLUDE:= -Isrc/                      \
	       $(OMNIINCLUDE)             \
	       $(BOOSTINCLUDE)            \
	      -I$(QT_INCLUDE)             \
	        $(LIBXMLPPINCLUDE)        \
	      -I$(PUTOOLS)/include        \
	      -I$(PUTOOLS)/include/puTools\
	      -I$(TOP)/include            \
	      -I$(TOP)/include/kvalobs    \
	      -I$(TOP)/include/miutil     \
	      -I$(TOP)/include/dnmithread \
	      -I$(TOP)/include/kvdb       \
	      -I$(TOP)/include/kvskel     \
	      -I$(TOP)/include/fileutil   \
	      -I$(TOP)/include/corbahelper 

LIB:=	-L$(PUTOOLS)/lib -L$(TOP)/lib -lkvalobs -lkvdb -lfileutil -ldl -ldnmithread \
		-lcorbahelper -lcorba_skel \
		-lmiutil -lpuTools -lmiconfparser -lmilog \
		$(OMNILIB) -lomniORB4 -lomnithread -lomniDynamic4 \
		$(BOOSTLIB) -lboost_thread \
		-lldap $(LIBXMLPPLIB)

CXXFLAGS+= -Wall
DEFINES+=
CXXLDFLAGS+=


include src/make.mk
include test/make.mk


# Qt:
UI_IMPL= $(UI:.ui=.cc)
UI_HEAD= $(UI:.ui=.h)
MOC_SRC= $(QSRC:.cc=.moc.cc) $(UI_IMPL:.cc=.moc.cc)

ALL_SRC= $(UI_IMPL) $(QSRC) $(MOC_SRC) $(SRC)
OBJ=  $(ALL_SRC:.cc=.o)

# Test:
TESTOBJ= $(TESTSRC:.cc=.o)
TESTLIB= -lcppunit

PREFIX=$(TOP)

all:  install

install: $(TARGET)
	mkdir -p $(PREFIX)/include/$(PROGRAM_NAME) $(PREFIX)/lib $(PREFIX)/lib/pkgconfig/
	cp $(TARGET) $(PREFIX)/lib
	cp -r src/*.h src/bits $(PREFIX)/include/$(PROGRAM_NAME)
	rm -f $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc; \
	cat $(PROGRAM_NAME).pc | sed s,PREFIX,`cd $(PREFIX); pwd`, >> $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc

uninstall:
	rm -rf $(PREFIX)/$(TARGET) $(PREFIX)/include/$(PROGRAM_NAME) $(PREFIX)/lib/pkgconfig/$(PROGRAM_NAME).pc


.cc.o:
	$(CXX) $(CXXFLAGS) $(DEFINES) $(INCLUDE) -o $@ -c $<

%.h:	%.ui
	cd $(dir $@); uic $(notdir $<) -o $(notdir $@)

%.cc: %.ui %.h
	cd $(dir $@); uic -impl $(notdir $*.h) $(notdir $<) -o $(notdir $@)


%.moc.cc:	%.h
	moc -o $@ $<

$(PROGRAM_NAME): $(OBJ) $(MAIN:.cc=.o)
	$(CXX) -o $@ -Wall $(CXXLDFLAGS) $(OBJ) $(MAIN:.cc=.o) $(LIB)


$(TARGET): $(OBJ)
	ar r lib$(PROGRAM_NAME).a $(OBJ)


$(TEST_PROGRAM_NAME): $(OBJ) $(TESTOBJ)
	$(CXX) -o $@ -Wall $(CXXLDFLAGS) $(OBJ) $(TESTOBJ) $(LIB) $(TESTLIB)

$(LIB_NAME): $(OBJ)


test:  $(TEST_PROGRAM_NAME)
	@echo Running tests:; ./$(TEST_PROGRAM_NAME)


# Autogenerated dependencies:
%.d: %.cc $(UI_HEAD)
	-@set -e; rm -f $@; \
	$(CXX) -MM -MQ $(basename $<).o $(CXXFLAGS) $(DEFINES) $(INCLUDE) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

DEPENDS_FILES= $(SRC:.cc=.d) $(MAIN:.cc=.d) $(QSRC:.cc=.d) $(UI_IMPL:.cc=.d) $(TESTSRC:.cc=.d) $(TESTMAIN:.cc=.d)

-include $(DEPENDS_FILES)

# Not allow qt tools to delete generated headers
KEEP_UI_HEADERS:        $(UI_HEAD)


pretty:
	rm -f core core.*
	find . -name '*~' -type f -exec rm -f  {} \;
	find . -name '*.d.*' -type f -exec rm -f  {} \;

clean: pretty
	rm -f $(OBJ) $(MAIN:.cc=.o) $(TESTOBJ) $(UI_HEAD) $(UI_IMPL) $(MOC_SRC) $(DEPENDS_FILES)

veryclean: clean
	rm -f $(TARGET) $(TEST_PROGRAM_NAME)

.PHONY: all pretty clean test KEEP_UI_HEADERS
