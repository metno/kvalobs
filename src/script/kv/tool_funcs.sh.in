test_host=false
conffile="/etc/kvalobs/kv-ips.conf"

#INPUT variable that can be defined 
#logfile - A file to log to. /dev/null if not defined.
#SILENT - (true|false) Write to the terminal if false.
#DOLOG - (true|false) Write to the logfile if true. 

: ${SILENT:-true}

if [ -z "$DOLOG" ]; then
   DOLOG=true
fi

if [ x"$KVCONFIG" = "x" ]; then
    KVCONFIG=__KVCONFIG__
fi

if [ x"$KVCONF" = "x" ]; then
    KVCONF=`$KVCONFIG --sysconfdir`/kvalobs
fi


if [ -f $conffile ]; then
    . $conffile
    mylog=/dev/null
    [ x"$logfile" = "x" ] || mylog=$logfile
    echo "Reading '$conffile'!" >> $mylog
else
   test_host=true
fi

#echo "KVHOSTS: $KVHOSTS"
#echo "KVMASTER_HOST: $KVMASTER_HOST"


is_ip_popinting_to_me() 
{
   local myip=""
   local mylog=""
   local testfile=$(mktemp /tmp/kv_ip_check.XXXXXXX)
   local sshlog=$(mktemp /tmp/kv_ip_check_ssh_log.XXXXXXX)
      
   echo "Running ssh comand: 'ssh kvalobs@$1 ls $testfile'" >> $sshlog
   ssh kvalobs@$1 ls $testfile  >> $sshlog 2>&1
   
   if [ $? -eq 0 ]; then
      myip=$1
   elif [ $? -eq 255 ]; then
     logerror "$(cat $sshlog)"
   fi
   #loginfo "$(cat $sshlog)"
   rm -f $testfile
   rm -f $sshlog
   echo "$myip"
}

my_extern_ip() 
{
   local myip=""
   for ip in "$1"; do
      testip=$(is_ip_popinting_to_me $ip)
      if [ -n "$testip" ]; then
         myip=ip
         break 
      fi
   done
   rm -f $testfile
   echo "$myip"
}


log()
{
   local mylog; local log
   local runTime; local size
   mylog=""
   runTime=$(date +'%Y-%m-%d %H:%M:%S')
   
   log=true
   if [ "$DOLOG" = false ]; then 
      log=false
   fi

   if [ $# -gt 1 ]; then
      log=$2
   fi

   if [ -z "$SILENT" ]; then
      SILENT=true
   fi   
   
   if [ "$SILENT" = "false" ]; then
      echo $1
   fi

    if [ -z "$logfile" ]; then
        mylog="/dev/null"
    else
        mylog=$logfile
    fi
            
   if [ -f $mylog ]; then
      size=$(stat -c '%s' $mylog)
   
      if [ $size -gt 10240 ]; then
         mv $mylog $mylog.tmp
         tail -n 10 $mylog.tmp > $mylog
         newSize=$(stat -c '%s' $mylog)
         runTime=$(date +'%Y-%m-%d %H:%M:%S')
         echo "$runTime - Logfile truncated - size before truncate $size new size $newSize." >> $mylog
         rm -f $mylog.tmp
      fi
   fi

   if [ "$log" = true ]; then
      echo "$runTime - $1" >> $mylog
   else
      #At least touch the logfile so it shows some sign of that the program is alive.
      touch $mylog
   fi
}

logerror()
{  
   log "$@" true
}

loginfo()
{  
   log "$@" true
}


ipalias_status()
{
    local me=`uname -n`
    local res=0
    local prodhost=""

    if [ "$test_host" = true ]; then
        if [ "$SILENT" != true ]; then
           log "$me, is a test machine (?)."
        fi
        echo "test"
        return 0
    fi

    if [ -z "$KVMASTER_HOST" ]; then
        log "Configuration error, no KVMASTER_HOST defined in the configuartaion file '$conffile'."
        echo "undefined"
        return 2
    fi 
      
    prodhost=$(is_ip_popinting_to_me $KVMASTER_HOST)
    
    if [ -n "$prodhost" ]; then
       log "This machine is the kvalobs master."
       echo "true" 
		 return 0
    else 
		log "Another machine has the kvalobs production ip '$KVMASTER_HOST'."
		echo "false"
		return 1
	 fi
}

isProgRunning()
{
    local PID; local running 
    local piddir; local nodename 
    local pidfile; local pid
    
    running="" 
    piddir=`$KVCONFIG --rundir`
    nodename=`uname -n`
    pidfile=$piddir/$1-$nodename.pid
    prog=$1
   
    #echo "pidfile: $pidfile"
    
    if [ -f "$pidfile" ]; then 
      PID=`cat $pidfile`
      #echo "PID: $prog: $PID"
      kill  -0 $PID > /dev/null 2>&1

      if [ $? -eq 0 ]; then
         PIDS=`pgrep $prog 2>/dev/null`
         running=`echo $PIDS | grep $PID`
       
         if [ ! -z "$running" ]; then
            return 0
         else
            rm -f $pidfile
         fi 
        fi
   fi
    
   return 1
}
